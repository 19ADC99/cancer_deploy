[["index.html", "Multi-omics Integration for Target Discovery Abstract", " Multi-omics Integration for Target Discovery Andrea Del Cortona1 2024-09-27 Abstract andrea.delcortona@gmail.com↩︎ "],["gather-datasets-and-qc.html", "Chapter 1 Gather Datasets and QC 1.1 Gather resources 1.2 Samples Overview", " Chapter 1 Gather Datasets and QC 1.1 Gather resources We can gather cancer multi-omics datasets from large public data resources such as TCGA (The Cancer Genome Atlas) and the GDC (Genomic Data Commons), as well as smaller-scale datasets generated by individual labs from the USDC Xena platform. From the Xena platform, we can find the data from Pan-Cancer Atlas consortium, which provides textbook high quality datasets that can be explored for target discovery in cancer. TCGA PanCan collects 12,839 samples from 28 organs, 69 primary sites spanning 32 different cancer types. The metadata available for the samples and the subjects include: biopsys type (metastatic, primary tumor, solid tissue normal) –&gt; data cancer subtype based on canonical molecular classification (methylation, miRNA, mRNA, proteins, etc.) –&gt; data cancer subtype based on the immune models –&gt; data overall survival information –&gt; data For these samples, there are available rich clinical metadata and matched multiomics datasets. We can retrieved the following multiomics readouts: copy number variants at the gene level –&gt; data DNA methylation data –&gt; data gene expression (RNAseq) –&gt; data micro RNAs (miRNA) –&gt; data protein expression –&gt; data somatic mutations –&gt; data All the multiomics readouts are at the gene level, except for the DNA methylation data, that will have to be mapped and normalized at the gene level. Luckily, a mapping file is available as well. Xena provides as well already precomputed enrichments and cell types deconvolutions: gene programs that are canonical drug targets –&gt; data homologous recombination deficiency (HRD) –&gt; data immune signaling –&gt; data ssGSEA PARADIGM annotations –&gt; data stemness score based on DNA methylation signals –&gt; data stemnsess score based on the RNAseq expression of 103 key genes –&gt; data I assure you that integrating all these data will be fun, and it will provide deep insights on each cancer we decided to analyse. 1.2 Samples Overview Next step is to integrate together all the available sample and subjects metadata. This allows to break down the samples by cancer type and demographic distributions. While Xena provides some information, it lacks a cleaned table containing all the demographic information of the subjects. Conveniently, GitHub user ipezoa already retrieved from GDC and CGC and combined together all the metadata obtained from JSON and XML files. A thorough explanation of each metadata field is reported here. Let’s integrate all the metadata together. We have indeed access to a rich and comprehensive ensemble of clinical and sample metadata for the samples at hand. Let’s check the overall demographic distributions of all the samples. ## barplot age df_age = data.frame(table(metadata$gdc_cases.demographic.gender_1_1)) %&gt;% dplyr::mutate(perc = round(Freq / sum(Freq)*100, 1)) %&gt;% dplyr::mutate(sex = c(&quot;sex&quot;, &quot;sex&quot;)) bar_age = ggplot(df_age, aes(x = sex, y = perc, fill = Var1, color = Var1)) + geom_bar(stat = &quot;identity&quot;, alpha = 0.25) + geom_text(aes(label = paste(perc,&quot;%&quot;), y = perc), position = position_stack(vjust = 0.5), color = &quot;grey35&quot;) + scale_color_manual(values = c(&quot;lightpink1&quot;, &quot;cyan3&quot;)) + scale_fill_manual(values = c(&quot;lightpink1&quot;, &quot;cyan3&quot;)) + coord_flip(expand = FALSE) + theme(title = element_blank(), axis.text = element_text(size = 16), axis.title = element_blank(), legend.position = &quot;bottom&quot;, panel.background = element_rect(colour = &quot;black&quot;, fill = NA), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) ## barplot race df_race = data.frame(table(metadata$gdc_cases.demographic.race_1_1)) %&gt;% dplyr::mutate(perc = round(Freq / sum(Freq)*100, 1)) %&gt;% dplyr::mutate(race = rep(&quot;race&quot;, 6)) bar_race = ggplot(df_race, aes(x = race, y = perc, fill = Var1, color = Var1)) + geom_bar(stat = &quot;identity&quot;, alpha = 0.25) + geom_text(aes(label = paste(perc,&quot;%&quot;), y = perc), position = position_stack(vjust = 0.5), color = &quot;grey35&quot;) + scale_color_manual(values = c(&quot;#9edbee&quot;, &quot;#dbee9e&quot;, &quot;#ee9edb&quot;, &quot;#eeeeee&quot;, &quot;#9eb3ee&quot;, &quot;#ffdb32&quot;)) + scale_fill_manual(values = c(&quot;#9edbee&quot;, &quot;#dbee9e&quot;, &quot;#ee9edb&quot;, &quot;#eeeeee&quot;, &quot;#9eb3ee&quot;, &quot;#ffdb32&quot;)) + coord_flip(expand = FALSE) + theme(title = element_blank(), axis.text = element_text(size = 16), axis.title = element_blank(), legend.position = &quot;bottom&quot;, panel.background = element_rect(colour = &quot;black&quot;, fill = NA), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) ## barplot age X race df_race_sex = prop.table(table(metadata[, c(&quot;gdc_cases.demographic.race_1_1&quot;, &quot;gdc_cases.demographic.gender_1_1&quot;)]), 1) df_race_sex = as.data.frame(df_race_sex) %&gt;% dplyr::mutate(perc = round(Freq*100, 1)) bar_race_sex = ggplot(df_race_sex, aes(x = gdc_cases.demographic.race_1_1, y = perc, fill = gdc_cases.demographic.gender_1_1)) + geom_bar(stat = &quot;identity&quot;, alpha = 0.25) + geom_text(aes(label = paste(perc,&quot;%&quot;), y = perc), position = position_stack(vjust = 0.5), color = &quot;grey35&quot;) + scale_color_manual(values = c(&quot;lightpink1&quot;, &quot;cyan3&quot;)) + scale_fill_manual(values = c(&quot;lightpink1&quot;, &quot;cyan3&quot;)) + coord_flip(expand = FALSE) + theme(title = element_blank(), axis.text = element_text(size = 16), axis.title = element_blank(), legend.position = &quot;none&quot;, panel.background = element_rect(colour = &quot;black&quot;, fill = NA), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) ## histogram of age of subjects mu_age = metadata %&gt;% dplyr::group_by(gdc_cases.demographic.gender_1_1) %&gt;% dplyr::summarize(Mean = mean(gdc_cases.diagnoses.age_at_diagnosis_1_1, na.rm = TRUE)/365) p_age = ggplot(metadata, aes(x = gdc_cases.diagnoses.age_at_diagnosis_1_1/365, group = gdc_cases.demographic.gender_1_1)) + geom_histogram(aes(color = gdc_cases.demographic.gender_1_1, fill = gdc_cases.demographic.gender_1_1), position = &quot;identity&quot;, binwidth = 2, alpha = 0.25) + geom_vline(data = mu_age, aes(xintercept = Mean, color = gdc_cases.demographic.gender_1_1), linetype = &quot;dashed&quot;) + scale_color_manual(values = c(&quot;lightpink1&quot;, &quot;cyan3&quot;)) + scale_fill_manual(values = c(&quot;lightpink1&quot;, &quot;cyan3&quot;)) + labs(x = &quot;Age&quot;) + theme(title = element_blank(), axis.text = element_text(size = 16), axis.title.x = element_text(size = 18), axis.title.y = element_blank(), legend.position = &quot;none&quot;, panel.background = element_rect(colour = &quot;black&quot;, fill = NA), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) ## combine plots cowplot::plot_grid( bar_age, bar_race, bar_race_sex, p_age, nrow = 4, rel_heights = c(0.8, 1, 1.5, 3), labels = NULL ) Figure 1.1: Demographic overview Let’s check the different cancer included in the study. UMAP N samples per tissues N samples per tumour fraction of metastatic, priamry, etc 1.2.1 TO DO batch effects correlation between slides info &amp; omics "],["horizontal-integration.html", "Chapter 2 Horizontal integration", " Chapter 2 Horizontal integration multiple transcritpotimcs datsets different cohortsf rom https://xenabrowser.net/datapages/ either horizontal integration or validation set "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
